// Package service —Å–æ–¥–µ—Ä–∂–∏—Ç APPLICATION SERVICES ‚Äî —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
//
// üîë –†–æ–ª—å Application Service:
// - –û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–æ–º–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è use case
// - –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏, –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
// - –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏! (–æ–Ω–∞ –≤ –∞–≥—Ä–µ–≥–∞—Ç–∞—Ö)
// - –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–æ–º–µ–Ω–∞, –Ω–æ –Ω–µ –æ—Ç –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–∫—Ä–æ–º–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤)

package service

import (
	"context"

	"github.com/onionfriend2004/threadbook_backend/internal/auth/domain"

	"golang.org/x/crypto/bcrypt"
)

// AuthService —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
type AuthService struct {
	userRepo domain.UserRepository
}

// NewAuthService —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å.
func NewAuthService(userRepo domain.UserRepository) *AuthService {
	return &AuthService{userRepo: userRepo}
}

// Register —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// –≠—Ç–æ use case: "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è".
func (s *AuthService) Register(ctx context.Context, emailStr, passwordStr string) (string, error) {
	// 1. –°–æ–∑–¥–∞—ë–º value objects –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	email, err := domain.NewEmail(emailStr)
	if err != nil {
		return "", err
	}

	plaintextPassword, err := domain.NewPasswordFromPlaintext(passwordStr)
	if err != nil {
		return "", err
	}

	// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	if _, err := s.userRepo.FindByEmail(ctx, email); err == nil {
		return "", domain.ErrUserAlreadyExists
	}

	// 3. –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å (–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞!)
	hashedBytes, err := bcrypt.GenerateFromPassword([]byte(plaintextPassword.String()), bcrypt.DefaultCost)
	if err != nil {
		return "", err
	}
	hashedPassword := domain.HashedPassword(string(hashedBytes))

	// 4. –°–æ–∑–¥–∞—ë–º –∞–≥—Ä–µ–≥–∞—Ç
	user, err := domain.NewUser(email, hashedPassword)
	if err != nil {
		return "", err
	}

	// 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	if err := s.userRepo.Save(ctx, user); err != nil {
		return "", err
	}

	return user.ID, nil
}

// Login –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func (s *AuthService) Login(ctx context.Context, emailStr, passwordStr string) error {
	email, err := domain.NewEmail(emailStr)
	if err != nil {
		return err
	}

	user, err := s.userRepo.FindByEmail(ctx, email)
	if err != nil {
		return domain.ErrInvalidCredentials
	}

	// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º plaintext-–ø–∞—Ä–æ–ª—å —Å —Ö—ç—à–µ–º
	if err := bcrypt.CompareHashAndPassword([]byte(user.Password.String()), []byte(passwordStr)); err != nil {
		return domain.ErrInvalidCredentials
	}

	return nil
}
