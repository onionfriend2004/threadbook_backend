// User ‚Äî —ç—Ç–æ AGGREGATE ROOT (–∫–æ—Ä–µ–Ω—å –∞–≥—Ä–µ–≥–∞—Ç–∞) –≤ bounded context "Auth".
//
// üîë –°–≤–æ–π—Å—Ç–≤–∞ Aggregate Root:
// - –Ø–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∞–≥—Ä–µ–≥–∞—Ç–æ–º
// - –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –≤—Å–µ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–∞
// - –í–Ω–µ—à–Ω–∏–π –º–∏—Ä –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç –¢–û–õ–¨–ö–û —Å –∫–æ—Ä–Ω–µ–º (–Ω–µ —Å Email/Password –Ω–∞–ø—Ä—è–º—É—é)
// - –°–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∫–∞–∫ –º–µ—Ç–æ–¥—ã (–±–æ–≥–∞—Ç–∞—è –º–æ–¥–µ–ª—å!)

package domain

import "errors"

// User –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ.
// –≠—Ç–æ –∞–≥—Ä–µ–≥–∞—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑:
// - ID (–∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –∞–≥—Ä–µ–≥–∞—Ç–∞)
// - Email (value object)
// - Password (value object)
type User struct {
	ID       string
	Email    Email
	Password Password
}

// NewUser —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —É–∂–µ –≤–∞–ª–∏–¥–Ω—ã–µ Email –∏ Password (plaintext).
//
// üí° –ü–æ—á–µ–º—É —Ñ–∞–±—Ä–∏–∫–∞ –≤ –¥–æ–º–µ–Ω–µ?
// - –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ User —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤ –≤–∞–ª–∏–¥–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
// - –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è
func NewUser(email Email, password Password) (*User, error) {
	if email == "" {
		return nil, errors.New("email is required")
	}
	if password == "" {
		return nil, errors.New("password is required")
	}
	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID ‚Äî –∑–∞–¥–∞—á–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã! –ó–¥–µ—Å—å ID –æ—Å—Ç–∞—ë—Ç—Å—è –ø—É—Å—Ç—ã–º.
	// –ê–≥—Ä–µ–≥–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–≤–æ–∏—Ç ID.
	return &User{
		Email:    email,
		Password: password,
	}, nil
}

// ChangeEmail –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å email —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.
// –≠—Ç–æ –±–∏–∑–Ω–µ—Å-–æ–ø–µ—Ä–∞—Ü–∏—è, –ø–æ—ç—Ç–æ–º—É –æ–Ω–∞ ‚Äî –º–µ—Ç–æ–¥ –∞–≥—Ä–µ–≥–∞—Ç–∞.
func (u *User) ChangeEmail(newEmail Email) error {
	if newEmail == "" {
		return errors.New("new email is required")
	}
	u.Email = newEmail
	return nil
}

// VerifyPassword –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ plaintext-–ø–∞—Ä–æ–ª—å —Ö—ç—à—É.
// ‚ö†Ô∏è –í–ê–ñ–ù–û: —ç—Ç–∞ –ª–æ–≥–∏–∫–∞ ‚Äî –≤ –¥–æ–º–µ–Ω–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–æ!
// –ù–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ‚Äî –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ (bcrypt).
// –ü–æ—ç—Ç–æ–º—É –º—ã –ø–µ—Ä–µ–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å.
//
// –û–¥–Ω–∞–∫–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ Password —É–∂–µ –∑–Ω–∞–µ—Ç,
// —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω —Ö—ç—à–µ–º, –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–µ–ª–∞–µ—Ç—Å—è –≤–Ω–µ –¥–æ–º–µ–Ω–∞ (–≤ service).
// –≠—Ç–æ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å —Ä–∞–¥–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.
//
// –í –∏–¥–µ–∞–ª–µ: –¥–æ–º–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å PasswordHasher, –∞ service –µ–≥–æ —Ä–µ–∞–ª–∏–∑—É–µ—Ç.
