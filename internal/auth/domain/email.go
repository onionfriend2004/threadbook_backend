// Package domain —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å—Ç—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É.
// Email ‚Äî —ç—Ç–æ VALUE OBJECT (–æ–±—ä–µ–∫—Ç-–∑–Ω–∞—á–µ–Ω–∏–µ).
//
// üîë –°–≤–æ–π—Å—Ç–≤–∞ Value Object (VO):
// - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û —Å–≤–æ–∏–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ (–¥–≤–∞ VO —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äî —Ä–∞–≤–Ω—ã)
// - –ù–ï –∏–º–µ–µ—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ (–Ω–µ—Ç ID)
// - –ù–ï –∏–∑–º–µ–Ω—è–µ–º (immutable) ‚Äî —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤ –≤–∞–ª–∏–¥–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
// - –°–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–æ—é –ª–æ–≥–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
//
// üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
// - –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å "–ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫—É" –≤–º–µ—Å—Ç–æ Email
// - –õ–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω–∞
// - –Ø–∑—ã–∫ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏: "Email", –∞ –Ω–µ "—Å—Ç—Ä–æ–∫–∞ —Å @"

package domain

import (
	"regexp"
)

// Email ‚Äî value object –¥–ª—è email-–∞–¥—Ä–µ—Å–∞.
// –û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –µ—ë –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å.
type Email string

// NewEmail —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π Email, –ø—Ä–æ–≤–µ—Ä—è—è —Ñ–æ—Ä–º–∞—Ç.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ email –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.
//
// üí° –ü–æ—á–µ–º—É —Ñ–∞–±—Ä–∏–∫–∞?
// - –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ Email –í–°–ï–ì–î–ê –≤–∞–ª–∏–¥–µ–Ω
// - –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π" Email
func NewEmail(emailStr string) (Email, error) {
	// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è)
	const emailRegex = `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`
	matched, err := regexp.MatchString(emailRegex, emailStr)
	if err != nil || !matched {
		return "", ErrInvalidEmail("invalid email format")
	}
	return Email(emailStr), nil
}

// String –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ email.
// –ù—É–∂–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏).
func (e Email) String() string {
	return string(e)
}

// =============================================================================
// üí° –ü–û–ß–ï–ú–£ –ù–ï –ü–†–û–°–¢–û string?
//
// ‚ùå –ê–Ω—Ç–∏-–ø–∞—Ç—Ç–µ—Ä–Ω:
// func Register(email string) { ... } // ‚Üê –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å "foo" –∫–∞–∫ email!
//
// ‚úÖ DDD-–ø–æ–¥—Ö–æ–¥:
// func Register(email domain.Email) { ... } // ‚Üê –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –Ω–µ –¥–∞—Å—Ç –ø–µ—Ä–µ–¥–∞—Ç—å "foo"
// =============================================================================
