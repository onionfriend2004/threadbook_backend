// Package domain –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∏–∑–Ω–µ—Å-–æ—à–∏–±–∫–∏ –∫–∞–∫ —á–∞—Å—Ç—å —è–∑—ã–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏.
//
// üîë –ü—Ä–∏–Ω—Ü–∏–ø—ã:
// - –û—à–∏–±–∫–∏ ‚Äî —á–∞—Å—Ç—å –¥–æ–º–µ–Ω–∞, –∞ –Ω–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
// - –ö–∞–∂–¥–∞—è –æ—à–∏–±–∫–∞ –∏–º–µ–µ—Ç –ö–û–î (–¥–ª—è –ª–æ–≥–∏–∫–∏) –∏ –°–û–û–ë–©–ï–ù–ò–ï (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
// - –í delivery-—Å–ª–æ–µ –æ—à–∏–±–∫–∏ –º–∞–ø–ø—è—Ç—Å—è –Ω–∞ HTTP-—Å—Ç–∞—Ç—É—Å—ã

package domain

import (
	"errors"
	"fmt"
)

// AuthErrorCode ‚Äî –∫–æ–¥—ã –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
type AuthErrorCode string

const (
	ErrCodeUserNotFound       AuthErrorCode = "USER_NOT_FOUND"
	ErrCodeUserAlreadyExists  AuthErrorCode = "USER_ALREADY_EXISTS"
	ErrCodeInvalidCredentials AuthErrorCode = "INVALID_CREDENTIALS"
	ErrCodeInvalidEmail       AuthErrorCode = "INVALID_EMAIL"
	ErrCodeWeakPassword       AuthErrorCode = "WEAK_PASSWORD"
)

// AuthError ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∏–∑–Ω–µ—Å-–æ—à–∏–±–∫–∞.
type AuthError struct {
	Code    AuthErrorCode
	Message string
}

// Error —Ä–µ–∞–ª–∏–∑—É–µ—Ç error interface.
func (e *AuthError) Error() string {
	return fmt.Sprintf("%s: %s", e.Code, e.Message)
}

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã –æ—à–∏–±–æ–∫
var (
	ErrUserNotFound = &AuthError{
		Code:    ErrCodeUserNotFound,
		Message: "user not found",
	}
	ErrUserAlreadyExists = &AuthError{
		Code:    ErrCodeUserAlreadyExists,
		Message: "user already exists",
	}
	ErrInvalidCredentials = &AuthError{
		Code:    ErrCodeInvalidCredentials,
		Message: "invalid credentials",
	}
	ErrInvalidEmail = func(msg string) *AuthError {
		return &AuthError{Code: ErrCodeInvalidEmail, Message: msg}
	}
	ErrWeakPassword = func(msg string) *AuthError {
		return &AuthError{Code: ErrCodeWeakPassword, Message: msg}
	}
)

// IsAuthError –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ AuthError.
func IsAuthError(err error) bool {
	var e *AuthError
	return errors.As(err, &e)
}
